import Foundation
import XcodeKit
import XCUITestGeneratorShared

/// Command manager responsible for handling Xcode extension commands
class CommandManager: NSObject, XCSourceEditorCommand {
    
    /// Possible errors during command execution
    enum CommandError: Error, LocalizedError {
        case bufferAccessFailure
        case notSwiftUIFile
        case analysisFailure(String)
        case apiKeyMissing
        case copilotApiFailure(String)
        case copilotRateLimitExceeded
        case networkFailure(String)
        
        var errorDescription: String? {
            switch self {
            case .bufferAccessFailure:
                return "Failed to access the Xcode editor buffer"
            case .notSwiftUIFile:
                return "This doesn't appear to be a SwiftUI file. The extension works only with SwiftUI views."
            case .analysisFailure(let reason):
                return "Failed to analyze SwiftUI code: \(reason)"
            case .apiKeyMissing:
                return "GitHub Copilot API key not configured. Please run the container app to set up your API key."
            case .copilotApiFailure(let reason):
                return "Copilot API error: \(reason)"
            case .copilotRateLimitExceeded:
                return "Copilot API rate limit exceeded. Please try again later."
            case .networkFailure(let reason):
                return "Network error: \(reason)"
            }
        }
    }
    
    // MARK: - Properties
    
    private let analyzer = SwiftUIAnalyzer()
    private let generator = XCUITestGenerator()
    private let codeAnalyzer = CodeAnalyzer()
    private let unitTestGenerator = UnitTestGenerator()
    
    // MARK: - XCSourceEditorCommand
    
    /// Perform the command with the given invocation
    /// - Parameters:
    ///   - invocation: The command invocation
    ///   - completionHandler: The completion handler to call when done
    func perform(with invocation: XCSourceEditorCommandInvocation, completionHandler: @escaping (Error?) -> Void) {
        let commandIdentifier = invocation.commandIdentifier
        
        switch commandIdentifier {
        case "com.xcuitestgenerator.XCUITestGeneratorExtension.GenerateXCUITests":
            generateXCUITests(with: invocation, completionHandler: completionHandler)
        case "com.xcuitestgenerator.XCUITestGeneratorExtension.GenerateUnitTests":
            generateUnitTests(with: invocation, completionHandler: completionHandler)
        default:
            completionHandler(nil)
        }
    }
    
    // MARK: - Command Implementation
    
    /// Generate XCUITests for the current SwiftUI view
    /// - Parameters:
    ///   - invocation: The command invocation
    ///   - completionHandler: Completion handler called when done
    private func generateXCUITests(with invocation: XCSourceEditorCommandInvocation, completionHandler: @escaping (Error?) -> Void) {
        let buffer = invocation.buffer
        let swiftUICode = buffer.completeBuffer
        
        guard isSwiftUIViewFile(swiftUICode) else {
            completionHandler(CommandError.notSwiftUIFile)
            return
        }
        
        let analysisResult = analyzer.analyze(swiftUICode)
        
        switch analysisResult {
        case .success(let viewInfo):
            do {
                // Generate tests using our local generator
                let testCode = try generator.generateTests(for: viewInfo)
                
                buffer.lines.add("\n// MARK: - Generated XCUITests\n")
                buffer.lines.add("// Suggestion: Move these tests to a separate file named '\(viewInfo.name)Tests.swift'\n")
                buffer.lines.add(testCode)
                completionHandler(nil)
            } catch {
                completionHandler(CommandError.analysisFailure(error.localizedDescription))
            }
            
        case .failure(let error):
            completionHandler(CommandError.analysisFailure(error.localizedDescription))
        }
    }
    
    /// Generate unit tests for the current Swift file
    /// - Parameters:
    ///   - invocation: The command invocation
    ///   - completionHandler: Completion handler called when done
    private func generateUnitTests(with invocation: XCSourceEditorCommandInvocation, completionHandler: @escaping (Error?) -> Void) {
        let buffer = invocation.buffer
        let code = buffer.completeBuffer
        
        let analysisResult = codeAnalyzer.analyze(code)
        
        switch analysisResult {
        case .success(let testableUnits):
            let testCode = unitTestGenerator.generateTests(for: testableUnits)
            buffer.lines.add("\n// MARK: - Generated Unit Tests\n")
            buffer.lines.add("// Suggestion: Move these tests to a separate test file\n")
            buffer.lines.add(testCode)
            completionHandler(nil)
        case .failure(let error):
            completionHandler(CommandError.analysisFailure(error.localizedDescription))
        }
    }
    
    // MARK: - Helper Methods
    
    /// Check if this is a SwiftUI file
    private func isSwiftUIViewFile(_ code: String) -> Bool {
        return code.contains("import SwiftUI") &&
        (code.contains("struct") && code.contains(": View")) &&
        code.contains("var body")
    }
    
    /// Get the API key from shared storage
    /// - Returns: The API key, if available
    private func getApiKey() -> String? {
        // Try to get the API key from shared UserDefaults
        if let userDefaults = UserDefaults(suiteName: Constants.appGroupIdentifier) {
            return userDefaults.string(forKey: "copilotApiKey")
        }
        
        // Fall back to keychain if UserDefaults doesn't have it
        do {
            let keychainManager = KeychainManager(serviceName: Constants.keychainServiceName)
            return try keychainManager.getString(forAccount: Constants.apiKeyAccount)
        } catch {
            NSLog("Failed to get API key from keychain: \(error.localizedDescription)")
            return nil
        }
    }
}